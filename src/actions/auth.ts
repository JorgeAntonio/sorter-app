'use server'

import { authFunctionApi } from "@/app/api/auth";
import { FormState, LoginFormSchema, SignupFormSchema } from "@/lib/definitions";
import { createSession, deleteSession } from "@/lib/session";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";

export async function signin(state: FormState, formData: FormData) {

    const validatedFields = LoginFormSchema.safeParse({
        username: formData.get('username'),
        password: formData.get('password'),
    })

    console.log('validatedFields', validatedFields)

    if (!validatedFields.success) {
        return {
            errors: validatedFields.error.flatten().fieldErrors,
        }
    }

    const fields = validatedFields.data;
    // e.g. Hash the user's password before storing it
    // const hashedPassword = await bcrypt.hash(password, 10)

    const data = await authFunctionApi.login({
        username: fields.username,
        password: fields.password,
    })

    const token = data.access

    if (!token) {
        return {
            message: 'No se pudo iniciar sesión. Verifique sus credenciales e intente de nuevo.',
        }
    } 

    if (token !== undefined) {
        await createSession(token)
        // revalidatePath('/home')
        // redirect('/home')
    }
        
    return {
        message: 'Éxito. Ha iniciado sesión correctamente.',
    }
}

export async function signup(state: FormState, formData: FormData) {
    // Validate form fields
    const validatedFields = SignupFormSchema.safeParse({
        username: formData.get('username'),
        email: formData.get('email'),
        password: formData.get('password'),
        password2: formData.get('password2'),
        ruc: formData.get('ruc'),
        first_name: formData.get('first_name'),
        last_name: formData.get('last_name'),
    });

    if (!validatedFields.success) {
        return {
            errors: validatedFields.error.flatten().fieldErrors,
        };
    }

    const fields = validatedFields.data;

    const data = await authFunctionApi.register({
        username: fields.username,
        email: fields.email,
        password: fields.password,
        password2: fields.password2,
        first_name: fields.first_name,
        last_name: fields.last_name,
    });

    const user = data;
    
    if (user === undefined) {
        return {
            message: 'No se pudo crear la cuenta. Intente de nuevo.',
        };
    }
    
    // Simulate sending a verification email
    const verificationToken = "simulated-token"; // Ideally, this would be generated by your backend
    console.log(`Simulated verification email sent to ${fields.email} with token: ${verificationToken}`);

    // if (user !== undefined) {
    //     revalidatePath('/auth?sign-up=false');
    //     redirect('/auth?sign-up=false');
    // }

    return {
        message: 'Éxito. Cuenta creada correctamente. Por favor, revisa tu correo para verificar tu cuenta antes de iniciar sesión.',
    };
}

export async function logout() {
    deleteSession()
    revalidatePath('/')
    redirect('/')
}

// Example verification function
// export async function verifyEmail(token) {
//     if (token === "simulated-token") { // Simulate token check
//         // Update the user's status in the database to verified
//         return {
//             message: "Email verificado correctamente. Ahora puedes iniciar sesión.",
//         };
//     } else {
//         return {
//             message: "Token de verificación inválido.",
//         };
//     }
// }